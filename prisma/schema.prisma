// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  username      String?      @unique
  email         String?      @unique
  createdAt     DateTime     @default(now())
  role          Role         @default(VISTOR)
  password      String?
  comments      Comment[]
  marks         Mark[]
  likes         Like[]
  name          String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  interests     Tag[]
  collection    Collection[]
}

model Collection {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  mark   Mark[]   @relation(fields: [markId], references: [id])
  markId String 
}

enum Role {
  VISTOR
  ADMIN
}

model Mark {
  id          String      @id @default(cuid())
  title       String
  url         String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  isPublished Boolean     @default(false)
  comments    Comment[]
  likes       Like[]
  author      User        @relation(fields: [authorId], references: [id])
  authorId    String
  description String
  tags        Tag[]       @relation(fields: [tagId], references: [id])
  tagId       String?
  collection  Collection[]
  type        Type
}

enum Type {
  ARTICLE
  VIDEO
  WEBSITE
}

model Tag {
  id     String  @id @default(cuid())
  name   String  @unique
  marks  Mark[]
  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Comment {
  id        String   @id @default(cuid())
  mark      Mark     @relation(fields: [markId], references: [id])
  markId    String
  createdAt DateTime @default(now())
  content   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  mark      Mark[]     @relation(fields: [markId], references: [id])
  markId    String
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in BigInt
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
