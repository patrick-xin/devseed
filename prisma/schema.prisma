

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch","referentialIntegrity"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  username      String?      @unique
  email         String?      @unique
  createdAt     DateTime     @default(now())
  role          Role         @default(VISTOR)
  comments      Comment[]
  marks         Mark[]
  bio           String?
  name          String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  interests     Tag[]
  like          Like[]
  collection    Collection[]
  folder        Folder[]
  profile       Profile?
  followers     Follow[]      @relation("follower")
  following     Follow[]      @relation("following")
  notification  Notification[]
  feed          Feed[] 
}

model Profile {
  id         String   @id @default(cuid())
  github     String?
  linkedIn   String?
  twitter    String?
  facebook   String?
  website    String?
  about      String?
  location   String?
  coverImage String?
  skills     String[]
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @unique
}

model Collection {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  mark   Mark[]   
  markId String 
  collectionMark CollectionMark[]
  createdAt DateTime @default(now())
  folder Folder? @relation(fields: [folderId], references: [id])
  folderId String?
}

model Folder {
  id     String @id @default(cuid())
  name String
  user   User   @relation(fields: [userId], references: [id])
  userId String
  collection   Collection[]   
  collectionId String? 
  createdAt DateTime @default(now())
}

model CollectionMark {
  id     String @id @default(cuid())
  name  String?
  mark   Mark   @relation(fields: [markId], references: [id])
  markId String
  collection Collection @relation(fields: [collectionId], references: [id])
  collectionId String
  note String?
  createdAt DateTime @default(now())
}

model Like {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  mark   Mark[]  
  markId String 
  createdAt DateTime @default(now())
  notification Notification?
}


enum Role {
  VISTOR
  ADMIN
}

model Mark {
  id          String      @id @default(cuid())
  title       String
  url         String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  isPublished Boolean     @default(false)
  comments    Comment[] 
  author      User        @relation(fields: [authorId], references: [id])
  authorId    String
  description String
  tags        Tag[]      
  tagId       String?
  collection Collection[]
  collectionMark  CollectionMark[]
  type        Type
  like Like[]
  feed        Feed[]
}

enum Type {
  ARTICLE
  VIDEO
  WEBSITE
}

model Tag {
  id     String  @id @default(cuid())
  name   String  @unique
  marks  Mark[]
  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Comment {
  id        String   @id @default(cuid())
  mark      Mark     @relation(fields: [markId], references: [id], onDelete: Cascade)
  markId    String
  createdAt DateTime @default(now())
  content   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  notification Notification?
}



model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in BigInt
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


enum NotificationType {
  COMMENT
  LIKE
  FOLLOWER
  UNFOLLOW
  SYSTEM
}

model Notification {
  createdAt        DateTime         @default(now())
  id               String           @id @default(cuid())
  isRead           Boolean          @default(false)
  user             User?            @relation(fields: [userId], references: [id])
  userId           String?
  comment          Comment?         @relation(fields: [commentId], references: [id])
  commentId        String?          @unique
  follows          Follow?         @relation(fields: [followsId], references: [id])
  followsId        String?          @unique
  likes            Like?            @relation(fields: [likesId], references: [id])
  likesId          String?          @unique
  notificationType NotificationType
  message          Json
}

model Follow {
  id           String        @id @default(cuid())
  follower     User          @relation("follower", fields: [followerId], references: [id])
  followerId   String
  following    User          @relation("following", fields: [followingId], references: [id])
  followingId  String
  notification Notification?
}

model Feed {
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  mark      Mark     @relation(fields: [markId], references: [id])
  markId    String
}